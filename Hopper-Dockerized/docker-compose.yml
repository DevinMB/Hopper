# A docker-compose must always start by the version tag.
# We use '3' because it's the last version at this time.
version: '3'

# You should know that docker-composes works with services.
# 1 service = 1 container.
# For example, a service maybe, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  database:
    # build: postgres/
    image: 'postgres:latest'
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: W@ffles02 # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: Hopper # The PostgreSQL default database (automatically created at first launch)
    volumes: 
        # copy the sql script to create tables
        - ./schema.sql:/docker-entrypoint-initdb.d/10-schema.sql
        
  
  # As we said at the beginning, we want to create: a server and a client.
  # That is two services.

  # First service (container): the server.
  # Here you are free to choose the keyword.
  # It will allow you to define what the service corresponds to.
  # We use the keyword 'server' for the server.
  server:
    # The keyword "build" will allow you to define
    # the path to the Dockerfile to use to create the image
    # that will allow you to execute the service.
    # Here 'server/' corresponds to the path to the server folder
    # that contains the Dockerfile to use.
    build: java/

    # The command to execute once the image is created.
    # The following command will execute "python ./server.py".
    #command: python ./server

    # Remember that we defined in'server/server.py' 1234 as port.
    # If we want to access the server from our computer (outside the container),
    # we must share the content port with our computer's port.
    # To do this, the keyword 'ports' will help us.
    # Its syntax is as follows: [port we want on our machine]:[port we want to retrieve in the container]
   
    ports:
      - 3000:3000
      
    depends_on:
      - database
    links:
      - database:postgres_db 

  # Second service (container): the client.
  # We use the keyword 'client' for the server.
  client:
    # Here 'client/ corresponds to the path to the client folder
    # that contains the Dockerfile to use.
    build: vue/

    # The command to execute once the image is created.
    # The following command will execute "python ./client.py".
    #command: python ./client.py

    # The keyword 'network_mode' is used to define the network type.
    # Here we define that the container can access to the 'localhost' of the computer.
    # network_mode: host

    ports:
      - 8080:8080

    # The keyword'depends_on' allows you to define whether the service
    # should wait until other services are ready before launching.
    # Here, we want the 'client' service to wait until the 'server' service is ready.
    depends_on:
      - server
